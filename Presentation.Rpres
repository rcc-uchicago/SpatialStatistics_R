Presentation
========================================================
author: Parmanand Sinha
date: 
autosize: true

Topics
========================================================

- Representing geographical data in R
- dataset
- Finding non-randomness in point maps using spatstat

- Detection and measurement of spatial autocorrelation in lattice data using spdep

- Creating contour-type maps and semivariance using inverse distance weighting and geostatistical methods using gstat


```{r, echo=FALSE}
library(pacman)
p_load(tidyverse)
p_load(tidyverse)
p_load(spatstat)

``````

Data set
========================================================
```{r, echo=FALSE}
#The function 'head' will display the first few rows of the dataframe, snow_deaths 
setwd("~/GitHub/SpatialStatistics_R")
snow_deaths<-read.csv("./data/snow_deaths.csv")
snow_pumps<-read.csv("./data/snow_pumps.csv")
PointPatterns <-read.csv("./data/PointPatterns.csv")

head(PointPatterns)
head(snow_deaths)
head(snow_pumps)
```

Point Patterns
========================================================


- A point pattern is a statistical map where the location of the event is the outcome of a process 
- A point pattern is given by a set of events of interest that are observed in a region $R$
- A region has an infinite number of points (coordinates) on the plane 


Processes and Point Patterns
========================================================
-  A key question of interest is whether the pattern is random
- Non-random patterns are likely the outcome of some meaningful process
- Deciding whether the pattern is random or not is the initial step towards developing hypotheses about the underlying process 

Tidyverse and plotting
========================================================
'Tidyverse' is a collection of R packages designed for data science used in everyday data analyses  

```{r}
ggplot() + 
  geom_point(data = PointPatterns, aes(x = x, y = y)) + facet_grid(.~ Pattern) +
  coord_fixed()
```

```{r}

```


The function 'ggplot' is used for data visualization - it creates a graph. The function 'geom_point' tells R you want to create a plot of points. 'data = snow_deaths' tells R you want to use the 'snow_deaths' dataframe. 'aes' stands for aesthetics of your graph where 'x = long' sets the x axis to 'long', where 'y = lat' sets the y axis to 'lat', where 'color = blue' colours the points blue and 'shape = 16' assigns the shape of the points - in this case, '16' are circles and '17' are triangles  

```{r}
ggplot() +
  geom_point(data = snow_deaths, aes(x = long, y = lat), color = "blue", shape = 16) +
  geom_point(data = snow_pumps, aes(x = long, y = lat), color = "black", shape = 17)
```

```{r}
library(spdep)
library(RColorBrewer)
library(classInt)
```

```{r}
pr <- readShapePoly("PuertoRico_SPCS.shp")
pr.nb <- read.gal("PuertoRico.GAL")
pr.listw <- nb2listw(pr.nb, style="B")
```

```{r}
# Plotting Spatal connectivity 
cent <- coordinates(pr)
plot(pr, lwd=1.5)
plot(pr.nb, cent, add=T, col="red")
```

```{r}
# Farm Density in 2007
farm.den07 <- pr$nofarms_07/pr$area

# Mapping Farm Density in 2007
#pal.gray <- gray.colors(5)
pal.red <- brewer.pal(5,"Reds")
q5.den <- classIntervals(farm.den07,5,style="quantile") 
cols.den <- findColours(q5.den, pal.red)
plot(pr, col=cols.den)
brks.den <- round(q5.den$brks,3)
leg.txt  <- paste(brks.den[-6], brks.den[-1], sep=" - ")
legend("bottomright", fill=attr(cols.den,"palette"), legend=leg.txt ,bty="n")
```

```{r}
# Spatial autocorrelation tests
moran.test(farm.den07, pr.listw)
geary.test(farm.den07, pr.listw)

# Moran Scatterplot
moran.plot(farm.den07, pr.listw, pch=20)
```

```{r}
# Variogram
library(gstat)
pr.v <- variogram(farm.den07 ~ 1,  pr)
pr.v.fit <- fit.variogram(pr.v, vgm(11,"Sph", "30000", 1))
plot(pr.v, pr.v.fit)

# Farm Density in 2002
farm.den02 <- pr$nofarms_02/pr$area
```

```{r}
# Run a regression model
lm.farm <- lm(farm.den07 ~ farm.den02)
summary(lm.farm)
lm.morantest(lm.farm,pr.listw)
```

```{r}
# Mapping residuals of the regression model
res <- resid(lm.farm)
q5.res <- classIntervals(res,5,style="quantile")
cols.res <- findColours(q5.res, pal.red)
plot(pr, col=cols.res)
brks.res <- round(q5.res$brks,3)
leg.txt  <- paste(brks.res[-6], brks.res[-1], sep=" - ")
legend("bottomright", fill=attr(cols.res,"palette"), legend=leg.txt ,bty="n")
```
